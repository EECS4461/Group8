name: Python Package using Conda

on: [push]

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 5

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    - name: Add conda to system path
      run: |
        # $CONDA is an environment variable pointing to the root of the miniconda directory
        echo $CONDA/bin >> $GITHUB_PATH
    - name: Install dependencies
      run: |
        #conda install conda-forge::solara-server conda-forge::mesa conda-forge::networkx
        #conda env update --file environment.yml --name base
        #conda install -c https://conda.anaconda.org/sloria textblob
        #python -m textblob.download_corpora
        pip install -r requirements.txt

    #- name: Lint with flake8
      #run: |
        #conda install flake8
        # stop the build if there are Python syntax errors or undefined names
        #flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        #flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    # - name: Test with demo_01
    #   run: |
    #     #conda install pytest
    #     #pytest
    #     timeout 30s solara run ./src/demo_01.py
    # - name: Test with demo_02
    #   run: |
    #     timeout 30s solara run ./src/demo_02.py
    - name: Test with demo_01
      run: |
        # 在后台运行 Solara，并指定端口 8765
        solara run --port 8765 ./src/demo_01.py &
        # 保存后台进程 ID
        SOLARA_PID=$!
        # 最多等待 30 秒，检查服务器是否返回 200
        for i in {1..30}; do
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8765)
          if [ "$STATUS" -eq 200 ]; then
            echo "Server started successfully and returned 200"
            # 杀死后台进程
            kill $SOLARA_PID
            exit 0
          fi
          sleep 1
        done
        echo "Server did not start or did not return 200 within 30 seconds"
        kill $SOLARA_PID
        exit 1

    - name: Test with demo_02
      run: |
        # 在后台运行 Solara，并指定端口 8765
        solara run --port 8765 ./src/demo_02.py &
        # 保存后台进程 ID
        SOLARA_PID=$!
        # 最多等待 30 秒，检查服务器是否返回 200
        for i in {1..30}; do
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8765)
          if [ "$STATUS" -eq 200 ]; then
            echo "Server started successfully and returned 200"
            # 杀死后台进程
            kill $SOLARA_PID
            exit 0
          fi
          sleep 1
        done
        echo "Server did not start or did not return 200 within 30 seconds"
        kill $SOLARA_PID
        exit 1